/*
 * This is a basic confidence test.  It tests each operator against
 * a simple case of each of its allowed types and sometimes tests some
 * special cases.
 *
 * Each test is made with the assumption that all other features of the
 * interpreter, except the one being tested, work.
 */
static binops =
[array
    [struct op = "*",   a = 7, b = 13, r = 91],
    [struct op = "*=",  a = 7, b = 13, r = 91],
    [struct op = "*",   a = 7.0, b = 13.0, r = 91.0],
    [struct op = "*=",  a = 7.0, b = 13.0, r = 91.0],
    [struct op = "*",   a = 7, b = 13.0, r = 91.0],
    [struct op = "*=",  a = 7, b = 13.0, r = 91.0],
    [struct op = "*",   a = 7.0, b = 13, r = 91.0],
    [struct op = "*=",  a = 7.0, b = 13, r = 91.0],

    [struct op = "/",   a = 13, b = 7, r = 1],
    [struct op = "/=",  a = 13, b = 7, r = 1],
    [struct op = "/",   a = 14.0, b = 7.0, r = 2.0],
    [struct op = "/=",  a = 14.0, b = 7.0, r = 2.0],
    [struct op = "/",   a = 14, b = 7.0, r = 2.0],
    [struct op = "/=",  a = 14, b = 7.0, r = 2.0],
    [struct op = "/",   a = 14.0, b = 7, r = 2.0],
    [struct op = "/=",  a = 14.0, b = 7, r = 2.0],

    [struct op = "%",   a = 13, b = 7, r = 6],
    [struct op = "%=",  a = 13, b = 7, r = 6],

    [struct op = "+",   a = 7, b = 13, r = 20],
    [struct op = "+=",  a = 7, b = 13, r = 20],
    [struct op = "+",   a = 7.0, b = 13.0, r = 20.0],
    [struct op = "+=",  a = 7.0, b = 13.0, r = 20.0],
    [struct op = "+",   a = 7, b = 13.0, r = 20.0],
    [struct op = "+=",  a = 7, b = 13.0, r = 20.0],
    [struct op = "+",   a = 7.0, b = 13, r = 20.0],
    [struct op = "+=",  a = 7.0, b = 13, r = 20.0],
    [struct op = "+",   a = "wx", b = "yz", r = "wxyz"],
    [struct op = "+=",  a = "wx", b = "yz", r = "wxyz"],
    [struct op = "+",   a = [array 1,2], b = [array 3,4], r = [array 1,2,3,4]],
    [struct op = "+=",  a = [array 1,2], b = [array 3,4], r = [array 1,2,3,4]],
    [struct op = "+",   a = [struct x=1,z=1], b = [struct y=2,z=3], r = [struct x=1,y=2,z=3]],
    [struct op = "+=",  a = [struct x=1,z=1], b = [struct y=2,z=3], r = [struct x=1,y=2,z=3]],
    [struct op = "+",   a = [set 1,"x"], b = [set 1,"y"], r = [set 1,"x","y"]],
    [struct op = "+=",  a = [set 1,"x"], b = [set 1,"y"], r = [set 1,"x","y"]],
    /* No test of pointer addition here. */

    [struct op = "-",   a = 7, b = 13, r = -6],
    [struct op = "-=",  a = 7, b = 13, r = -6],
    [struct op = "-",   a = 7.0, b = 13.0, r = -6.0],
    [struct op = "-=",  a = 7.0, b = 13.0, r = -6.0],
    [struct op = "-",   a = 7, b = 13.0, r = -6.0],
    [struct op = "-=",  a = 7, b = 13.0, r = -6.0],
    [struct op = "-",   a = 7.0, b = 13, r = -6.0],
    [struct op = "-=",  a = 7.0, b = 13, r = -6.0],
    [struct op = "-",   a = [set 1,"x"], b = [set 1,"y"], r = [set "x"]],
    [struct op = "-=",  a = [set 1,"x"], b = [set 1,"y"], r = [set "x"]],
    /* No test of pointer subtraction here. */

    [struct op = ">>",  a = 13, b = 2, r = 3],
    [struct op = ">>=", a = 13, b = 2, r = 3],

    [struct op = "<<",  a = 13, b = 2, r = 52],
    [struct op = "<<=", a = 13, b = 2, r = 52],

    [struct op = "<",   a = 13, b = 2, r = 0],
    [struct op = "<",   a = 13, b = 13, r = 0],
    [struct op = "<",   a = 2, b = 13, r = 1],
    [struct op = "<",   a = 13, b = 2.0, r = 0],
    [struct op = "<",   a = 13, b = 13.0, r = 0],
    [struct op = "<",   a = 2, b = 13.0, r = 1],
    [struct op = "<",   a = 13.0, b = 2, r = 0],
    [struct op = "<",   a = 13.0, b = 13, r = 0],
    [struct op = "<",   a = 2.0, b = 13, r = 1],
    [struct op = "<",   a = 13.0, b = 2.0, r = 0],
    [struct op = "<",   a = 13.0, b = 13.0, r = 0],
    [struct op = "<",   a = 2.0, b = 13.0, r = 1],
    [struct op = "<",   a = "abc", b = "abz", r = 1],
    [struct op = "<",   a = "abc", b = "abc", r = 0],
    [struct op = "<",   a = "abz", b = "abc", r = 0],
    [struct op = "<",   a = "ab", b = "abz", r = 1],
    [struct op = "<",   a = "abz", b = "ab", r = 0],
    /* No test of pointer comparison here. */

    [struct op = "<=",  a = 13, b = 2, r = 0],
    [struct op = "<=",  a = 13, b = 13, r = 1],
    [struct op = "<=",  a = 2, b = 13, r = 1],
    [struct op = "<=",  a = 13, b = 2.0, r = 0],
    [struct op = "<=",  a = 13, b = 13.0, r = 1],
    [struct op = "<=",  a = 2, b = 13.0, r = 1],
    [struct op = "<=",  a = 13.0, b = 2, r = 0],
    [struct op = "<=",  a = 13.0, b = 13, r = 1],
    [struct op = "<=",  a = 2.0, b = 13, r = 1],
    [struct op = "<=",  a = 13.0, b = 2.0, r = 0],
    [struct op = "<=",  a = 13.0, b = 13.0, r = 1],
    [struct op = "<=",  a = 2.0, b = 13.0, r = 1],
    [struct op = "<=",  a = "abc", b = "abz", r = 1],
    [struct op = "<=",  a = "abc", b = "abc", r = 1],
    [struct op = "<=",  a = "abz", b = "abc", r = 0],
    [struct op = "<=",  a = "ab", b = "abz", r = 1],
    [struct op = "<=",  a = "abz", b = "ab", r = 0],

    [struct op = ">",   a = 13, b = 2, r = 1],
    [struct op = ">",   a = 13, b = 13, r = 0],
    [struct op = ">",   a = 2, b = 13, r = 0],
    [struct op = ">",   a = 13, b = 2.0, r = 1],
    [struct op = ">",   a = 13, b = 13.0, r = 0],
    [struct op = ">",   a = 2, b = 13.0, r = 0],
    [struct op = ">",   a = 13.0, b = 2, r = 1],
    [struct op = ">",   a = 13.0, b = 13, r = 0],
    [struct op = ">",   a = 2.0, b = 13, r = 0],
    [struct op = ">",   a = 13.0, b = 2.0, r = 1],
    [struct op = ">",   a = 13.0, b = 13.0, r = 0],
    [struct op = ">",   a = 2.0, b = 13.0, r = 0],
    [struct op = ">",   a = "abc", b = "abz", r = 0],
    [struct op = ">",   a = "abc", b = "abc", r = 0],
    [struct op = ">",   a = "abz", b = "abc", r = 1],
    [struct op = ">",   a = "ab", b = "abz", r = 0],
    [struct op = ">",   a = "abz", b = "ab", r = 1],

    [struct op = ">=",  a = 13, b = 2, r = 1],
    [struct op = ">=",  a = 13, b = 13, r = 1],
    [struct op = ">=",  a = 2, b = 13, r = 0],
    [struct op = ">=",  a = 13, b = 2.0, r = 1],
    [struct op = ">=",  a = 13, b = 13.0, r = 1],
    [struct op = ">=",  a = 2, b = 13.0, r = 0],
    [struct op = ">=",  a = 13.0, b = 2, r = 1],
    [struct op = ">=",  a = 13.0, b = 13, r = 1],
    [struct op = ">=",  a = 2.0, b = 13, r = 0],
    [struct op = ">=",  a = 13.0, b = 2.0, r = 1],
    [struct op = ">=",  a = 13.0, b = 13.0, r = 1],
    [struct op = ">=",  a = 2.0, b = 13.0, r = 0],
    [struct op = ">=",  a = "abc", b = "abz", r = 0],
    [struct op = ">=",  a = "abc", b = "abc", r = 1],
    [struct op = ">=",  a = "abz", b = "abc", r = 1],
    [struct op = ">=",  a = "ab", b = "abz", r = 0],
    [struct op = ">=",  a = "abz", b = "ab", r = 1],

    [struct op = "==",  a = 13, b = 2, r = 0],
    [struct op = "==",  a = 13, b = 13, r = 1],
    [struct op = "==",  a = 2, b = 13, r = 0],
    [struct op = "==",  a = 13, b = 2.0, r = 0],
    [struct op = "==",  a = 13, b = 13.0, r = 1],
    [struct op = "==",  a = 2, b = 13.0, r = 0],
    [struct op = "==",  a = 13.0, b = 2, r = 0],
    [struct op = "==",  a = 13.0, b = 13, r = 1],
    [struct op = "==",  a = 2.0, b = 13, r = 0],
    [struct op = "==",  a = 13.0, b = 2.0, r = 0],
    [struct op = "==",  a = 13.0, b = 13.0, r = 1],
    [struct op = "==",  a = 2.0, b = 13.0, r = 0],
    [struct op = "==",  a = "abc", b = "abz", r = 0],
    [struct op = "==",  a = "abc", b = "abc", r = 1],
    [struct op = "==",  a = "abz", b = "abc", r = 0],
    [struct op = "==",  a = "ab", b = "abz", r = 0],
    [struct op = "==",  a = "abz", b = "ab", r = 0],
    [struct op = "==",  a = [array 1,2], b = [array 1,2], r = 1],
    [struct op = "==",  a = [array 1,3], b = [array 1,2], r = 0],
    [struct op = "==",  a = [array 1], b = [array 1,2], r = 0],
    [struct op = "==",  a = [array 1,2], b = [array 1], r = 0],
    /* File equality not tested here. */
    /* Function equality not tested here. */
    /* Ptr equality not tested here. */
    [struct op = "==",  a = #a.b#, b = #a.b#, r = 1],
    [struct op = "==",  a = #a.b#, b = #a.c#, r = 0],
    [struct op = "==",  a = #a.#, b = #a.b#, r = 0],
    [struct op = "==",  a = #a.b#, b = #a.#, r = 0],
    [struct op = "==",  a =[set 1,"a"], b = [set 1,"a"], r = 1],
    [struct op = "==",  a =[set 1,"a"], b = [set 1,"b"], r = 0],
    [struct op = "==",  a =[set 1], b = [set 1,"a"], r = 0],
    [struct op = "==",  a =[set 1,"a"], b = [set 1], r = 0],
    [struct op = "==",  a = [struct a=1,b=2], b = [struct a=1,b=2], r = 1],
    [struct op = "==",  a = [struct a=1,b=2], b = [struct a=1,b=3], r = 0],
    [struct op = "==",  a = [struct a=1], b = [struct a=1,b=2], r = 0],
    [struct op = "==",  a = [struct a=1,b=2], b = [struct a=1], r = 0],
    [struct op = "==",  a = NULL, b = NULL, r = 1],
    [struct op = "==",  a = NULL, b = 0, r = 0],

    [struct op = "!=",  a = 13, b = 2, r = 1],
    [struct op = "!=",  a = 13, b = 13, r = 0],
    [struct op = "!=",  a = 2, b = 13, r = 1],
    [struct op = "!=",  a = 13, b = 2.0, r = 1],
    [struct op = "!=",  a = 13, b = 13.0, r = 0],
    [struct op = "!=",  a = 2, b = 13.0, r = 1],
    [struct op = "!=",  a = 13.0, b = 2, r = 1],
    [struct op = "!=",  a = 13.0, b = 13, r = 0],
    [struct op = "!=",  a = 2.0, b = 13, r = 1],
    [struct op = "!=",  a = 13.0, b = 2.0, r = 1],
    [struct op = "!=",  a = 13.0, b = 13.0, r = 0],
    [struct op = "!=",  a = 2.0, b = 13.0, r = 1],
    [struct op = "!=",  a = "abc", b = "abz", r = 1],
    [struct op = "!=",  a = "abc", b = "abc", r = 0],
    [struct op = "!=",  a = "abz", b = "abc", r = 1],
    [struct op = "!=",  a = "ab", b = "abz", r = 1],
    [struct op = "!=",  a = "abz", b = "ab", r = 1],
    [struct op = "!=",  a = [array 1,2], b = [array 1,2], r = 0],
    [struct op = "!=",  a = [array 1,3], b = [array 1,2], r = 1],
    [struct op = "!=",  a = [array 1], b = [array 1,2], r = 1],
    [struct op = "!=",  a = [array 1,2], b = [array 1], r = 1],
    /* File equality not tested here. */
    /* Function equality not tested here. */
    /* Ptr equality not tested here. */
    [struct op = "!=",  a = #a.b#, b = #a.b#, r = 0],
    [struct op = "!=",  a = #a.b#, b = #a.c#, r = 1],
    [struct op = "!=",  a = #a.#, b = #a.b#, r = 1],
    [struct op = "!=",  a = #a.b#, b = #a.#, r = 1],
    [struct op = "!=",  a =[set 1,"a"], b = [set 1,"a"], r = 0],
    [struct op = "!=",  a =[set 1,"a"], b = [set 1,"b"], r = 1],
    [struct op = "!=",  a =[set 1], b = [set 1,"a"], r = 1],
    [struct op = "!=",  a =[set 1,"a"], b = [set 1], r = 1],
    [struct op = "!=",  a = [struct a=1,b=2], b = [struct a=1,b=2], r = 0],
    [struct op = "!=",  a = [struct a=1,b=2], b = [struct a=1,b=3], r = 1],
    [struct op = "!=",  a = [struct a=1], b = [struct a=1,b=2], r = 1],
    [struct op = "!=",  a = [struct a=1,b=2], b = [struct a=1], r = 1],
    [struct op = "!=",  a = NULL, b = NULL, r = 0],
    [struct op = "!=",  a = NULL, b = 0, r = 1],

    [struct op = "&",   a = 7, b = 13, r = 5],
    [struct op = "&=",  a = 7, b = 13, r = 5],

    [struct op = "|",   a = 7, b = 13, r = 15],
    [struct op = "|=",  a = 7, b = 13, r = 15],

    [struct op = "^",   a = 7, b = 13, r = 10],
    [struct op = "^=",  a = 7, b = 13, r = 10],

    [struct op = "~",   a = #a.c#, b = "abc", r = 1],
    [struct op = "~",   a = "abc", b = #a.c#, r = 1],
    [struct op = "~",   a = #a(.)c#, b = "abc", r = 1],
    [struct op = "~",   a = #a.#, b = "abc", r = 1],
    [struct op = "~",   a = "abc", b = #a.#, r = 1],
    [struct op = "~",   a = #a.c$#, b = "ab", r = 0],
    [struct op = "~",   a = "ab", b = #a.c$#, r = 0],

    [struct op = "~~",  a = #a(.)c#, b = "abc", r = "b"],
    [struct op = "~~=", a = #a(.)c#, b = "abc", r = "b"],
    [struct op = "~~",  a = "abc", b = #a(.)c#, r = "b"],
    [struct op = "~~=", a = "abc", b = #a(.)c#, r = "b"],
    [struct op = "~~",  a = #a(.)c$#, b = "ab", r = NULL],
    [struct op = "~~=", a = #a(.)c$#, b = "ab", r = NULL],
    [struct op = "~~",  a = "ab", b = #a(.)c$#, r = NULL],
    [struct op = "~~=", a = "ab", b = #a(.)c$#, r = NULL],

    [struct op = "~~~", a = #a(.)c(.)e#, b = "abcde", r = [array "b", "d"]],
    [struct op = "~~~", a = "abcde", b = #a(.)c(.)e#, r = [array "b", "d"]],
];

/*
 * For each operator, operands and result set we build a function which
 * performs the operation (by parseing a generated bit of text) and run
 * it; testing the return value against the given one.
 */
static func;            /* The generated function. */
static binop;           /* The element of binops (above) we are considering. */
static result;
static count    = 1;

forall (binop in binops)
{
    parse(sprintf("static func(a, b){return a %s b;}", binop.op), scope());

    try
        result = func(binop.a, binop.b);
    onerror
    {
        fail(sprintf("%s %s %s failed with error '%s' (binops %d)",
            string(binop.a),
            binop.op,
            string(binop.b),
            error,
            count));
    }

    if (result != binop.r)
    {
        fail(sprintf("%s %s %s produced %s, expected %s (binops %d)",
            string(binop.a),
            binop.op,
            string(binop.b),
            string(result),
            string(binop.r),
            count));
    }
    if (typeof(result) != typeof(binop.r))
    {
        fail(sprintf("%s %s %s produced type %s, expected type %s (binops %d)",
            string(binop.a),
            binop.op,
            string(binop.b),
            typeof(result),
            typeof(binop.r),
            count));
    }
    ++count;
}

a := 1 ? 0 + 1 : 2;
if (a != 1)
    fail("incorrect ? : result");

a := 1;
b := 2;
c := 3;
a <=> b <=> c;
if (a != 3 || b != 1 || c != 2)
	fail("<=> failure");

a := 1;
b := 2;
c = a <=> b;
if (c != 2)
	fail("<=> for value failed");

a := 2;
b = a++;
if (b != 2)
	fail("postfix ++ for value didn't work");

(a := 2) = 3;
if (a != 3)
	fail(":= for lvalue didn't work");

a := set();
a.x := 1;
if (a.x != 1)
	fail("failed to := to non-super supporting object");