/*
 * We use Ackerman's function to do work.
 */
static
ack(x, y)
{
    return x > 0
        ? ack(x - 1, y > 0 ? ack(x, y - 1) : 1)
        : y + 1;
}

x := thread(ack, 2, 3);
waitfor (x.result != NULL; x)
    ;
if (x.result != 9)
    fail("incorrect result from func in other thread");

static count;
auto x, i, did_crit = 0;
thread([func(){for (count = 0; count < 5000; ++count);}]);
while (count == NULL)
    ;
while (count < 5000)
{
    critsect
    {
        x = count;
        for (i = 0; i < 100; ++i)
            ;
        if (x != count)
            fail("critsect was divisible");
        did_crit = 1;
    }
}
if (!did_crit)
    fail("didn't execute critsect");


static state = "ping";

static
t1()
{
    auto    i;

    for (i = 0; i < 10; ++i)
    {
        waitfor (state == "ping"; "ping")
        {
            state = "pong";
            wakeup("pong");
        }
    }
    state = i;
    wakeup("done");
    wakeup("pong");
}

static
t2()
{
    for (;;)
    {
        waitfor (state == "pong" && typeof(state) != "int"; "pong")
        {
            state = "ping";
            wakeup("ping");
        }
    }
}

thread(t1);
thread(t2);

waitfor (typeof(state) == "int"; "done")
    ;
if (state != 10)
    fail("failed to waitfor/wakeup correctly");


error := NULL;
x := thread(fail, "bad thread");

if (x.junk != NULL)
	fail("non-existent thread key not NULL");

try
{
	waitfor(x.result != NULL; x)
		;
}
onerror
	;
if (error !~ #bad thread#)
	fail("failed to propogate error from thread");