.r icisys.1
.TH "icisys" "1"
.SH NAME
icisys \- ICI sys extension module of of UNIX-like system calls
.SH DESCRIPTION

Most Unix implementation of ici provide access to many of the Unix system
calls and other useful C library functions. Note that not all system
calls are supported and those that are may be incompletely supported
(e.g., signal). Most system call functions return integers, zero if
the call succeeded. Errors are reported using ici's error handling and
"system calls" will never return the -1 error return value. If an error
is raised by a system call the value of "error" in the error handler will
be the error message (as printed by the perror(3) function or returned
by the ANSI C strerror() function).

To assist in the use of system calls ici pre-defines variables to hold the
various flags and other values used when calling the system calls. These
variables are equivalent to the macros used in C. Not all systems support
all these variables. If the C header files do not define a value then
ici will not pre-define the variable.

\fIWin32 Support\fP

The version of ici for Microsoft's 32-bit Windows platforms (Win32)
supports many of these functions. Functions supported on Win32 platforms
(Windows 95 and Windows NT) are marked with WIN32. In addition some
functions are only available on Win32 platforms and are marked as so.

The following list summarises the Unix system call interface pre-defined
variables. See the documentation for the C macros for information as to
their use.

Values for open's flags parameter,

.nf
        O_RDONLY
        O_WRONLY
        O_RDWR
        O_APPEND
        O_CREAT
        O_TRUNC
        O_EXCL
        O_SYNC
        O_NDELAY
        O_NONBLOCK
        O_BINARY                (WIN32 only)
.fi

Values for spawn's mode parameter,

        _P_WAIT         (WIN32 only)
.br
        _P_NOWAIT               (WIN32 only)

Values for access's mode parameter,

.nf
        R_OK
        W_OK
        X_OK
        F_OK
.fi

Values for lseek's whence parameter,

.nf
        SEEK_SET
        SEEK_CUR
        SEEK_END
.fi

The following list summarises the system interface functions. Following
this is a detailed description of each of them.
.sp 0.5
        int =   \fBaccess\fP(string [, int])
.sp 0.5
        int =   \fBcreat\fP(string, int)
.sp 0.5
        array = \fBdir\fP([string, ] [regexp, ] [string ])
.sp 0.5
        int =   \fBdup\fP(int [, int])
.sp 0.5
                \fBexec\fP(string, array)
.sp 0.5
                \fBexec\fP(string, string...)
.sp 0.5
        int =   \fBlseek\fP(int, int [, int])
.sp 0.5
        int =   \fBopen\fP(string, int [, int])
.sp 0.5
        array =         \fBpipe\fP()
.sp 0.5
        struct =        \fBstat\fP(string|int|file)
.sp 0.5
        int =   \fBwait\fP()
.sp 0.5
        string =        \fBctime\fP(int)
.sp 0.5
        int =   \fBtime\fP()
.sp 0.5
        file =  \fBfdopen\fP(int)
.sp 0.5
        string =        \fBgetcwd\fP()
.sp 0.5
                \fBalarm\fP(int)
.sp 0.5
                \fBacct\fP(string)
.sp 0.5
                \fBchdir\fP(string)
.sp 0.5
                \fBchmod\fP(string, int)
.sp 0.5
                \fBchown\fP(string, int, int)
.sp 0.5
                \fBchroot\fP(string)
.sp 0.5
                \fB_close\fP(int)
.sp 0.5
                \fB_exit\fP(int)
.sp 0.5
        int =   \fBfork\fP()
.sp 0.5
        int =   \fBgetpid\fP()
.sp 0.5
        int =   \fBgetpgrp\fP()
.sp 0.5
        int =   \fBgetppid\fP()
.sp 0.5
        int =   \fBgetuid\fP()
.sp 0.5
        int =   \fBgeteuid\fP()
.sp 0.5
        int =   \fBgetgid\fP()
.sp 0.5
        int =   \fBgetegid\fP()
.sp 0.5
                \fBkill\fP(int, int)
.sp 0.5
                \fBlink\fP(string, string)
.sp 0.5
                \fBmkdir\fP(string, int)
.sp 0.5
                \fBmknod\fP(string, int, int)
.sp 0.5
                \fBnice\fP(int)
.sp 0.5
                \fBpause\fP()
.sp 0.5
                \fBrmdir\fP(string)
.sp 0.5
                \fBsetpgrp\fP()
.sp 0.5
                \fBsetuid\fP(int)
.sp 0.5
                \fBsetgid\fP(int)
.sp 0.5
                \fBsignal\fP(int, int)
.sp 0.5
                \fBsync\fP()
.sp 0.5
                \fBulimit\fP(int, int)
.sp 0.5
                \fBumask\fP(int)
.sp 0.5
                \fBunlink\fP(string)
.sp 0.5
                \fBclock\fP()
.sp 0.5
                \fBsystem\fP(string)
.sp 0.5
                \fBlockf\fP(int, int, int)
.sp 0.5
                \fBsleep\fP(int)
.sp 0.5
        int =   \fBspawn\fP([int, ] string, string...)
.sp 0.5
        int =   \fBspawn\fP([int, ] string, array)
.sp 0.5
                \fBrename\fP(string, string)
.sp 0.5
        struct =        \fBpasswd\fP(int|string)
.sp 0.5
        array = \fBpasswd\fP()
.sp 2
int = \fBaccess\fP(string [, int])

Call the access(2) function to determine the accessibility of a
file. The first parameter is the pathname of the file system object
to be tested. The second, optional, parameter is the mode (a bitwise
combination of R_OK, W_OK and X_OK or the special value, F_OK).  If mode
is not passed F_OK is assumed. Access returns 0 if the file system object
is accessible. Also supported on WIN32 platforms.

int = \fBcreat\fP(pathname, mode)

Create a new ordinary file with the given pathname and mode (permissions
etc...) and return the file descriptor, open for writing, for the
file. Also supported on WIN32 platforms.

array = \fBdir\fP([pathname, ] [regexp, ] [selector ])

This function is used to obtain the names of files within a given directory.
It returns an array of filenames.

The pathname argument provides the directory pathname.
If NULL or omitted, the current directory is used.

A regular expression can be used to select just matching names.

A string argument after a regular expression,
or the 2nd string argument if two are provided,
is interpreted as a file-type selector.
It is a string comprised of these characters:
.TP 1i
.B f
Include regular files.
.TP 1i
.B d
Include directories.
.TP 1i
.B a
Include all files \- regular, directory and special. \", and hidden.

.TP 0i
If no format is provided, the default is to select only regular files.
All hidden files are also returned.
So, when traversing directories, make sure you skip ``.'' and ``..''.


int = \fBdup\fP(int [, int])

Duplicate a file descriptor by calling dup(2) or dup2(2) and return a
new descriptor. If only a single parameter is passed dup(2) is called
otherwise dup2(2) is called. Also supported on WIN32 platforms.

\fBexec\fP(pathname, array)

\fBexec\fP(pathname, string...)

Execute a new program in the current process. The first parameter to
exec is the pathname of an executable file (the program). The remaining
parameters are either; an array of strings defining the parameters to be
passed to the program, or, a variable number of strings that are passed,
in order, to the program as its parameters. The first form is similar to
C's execv function and the second form to C's execl functions. Note that
no searching of the user's path is performed and the environment passed
to the program is that of the current process (i.e., both are implemented
by calls to execv(2)). This function is also available on Win32 platforms.

int = \fBlseek\fP(int, int [, int])

Set the read/write position for an open file. The first parameter is
the file descriptor associated with the file system object, the second
parameter the offset. The third is the whence value which determines
how the new file position is calculated. The whence value may be one
of SEEK_SET, SEEK_CUR or SEEK_END and defaults to SEEK_SET if not
specified. Also supported on WIN32 platforms.

int = \fBopen\fP(pathname, int [, int])

Open the named file for reading or writing depending upon the value of
the second parameter, flags, and return a file descriptor. The second
parameter is a bitwise combination of the various O_ values (see above)
and if this set includes the O_CREAT flag a third parameter, mode,
must also be supplied. Also supported on WIN32 platforms.

array = \fBpipe\fP()

Create a pipe and return an array containing two, integer, file
descriptors used to refer to the input and output endpoints of the pipe.

struct = \fBstat\fP(pathname|int|file)

Obtain information on the named file system object, file descriptor or
file underlying an ici file object and return a struct containing that
information. If the parameter is a file object that file object must
refer to a file opened with ici's fopen function. The returned struct
contains the following keys (which have the same names as the fields of
the Unix statbuf structure with the leading "st_" prefix removed):

.nf
        dev
        ino
        mode
        nlink
        uid
        gid
        rdev
        size
        atime
        mtime
        ctime
        blksize
        blocks
.fi

All values are integers. Also supported on WIN32 platforms.

int = \fBwait\fP()

Wait until a signal is received or a child process terminates or stops
due to tracing and return the status returned by system call.

string = \fBctime\fP(int)

Convert a time value (see time, below) to a string of the form "Sun
Sep 16 01:03:52 1973\en" and return that string. This is primarily of
use when converting the time values returned by stat. Also supported on
WIN32 platforms.

int = \fBtime\fP()

Return the time since 00:00:00 GMT,  Jan.  1,  1970, measured in seconds.
Also supported on WIN32 platforms.

file = \fBfdopen\fP(int [, mode])

Returns a file object that can be used to perform I/O on the specified
file descriptor. The file is opened for reading or writing according to
mode (see fopen). If mode is specified "r" (reading) is assumed.

string = \fBgetcwd\fP()

Returns the name of the current working directory. Also supported on
WIN32 platforms.

\fBalarm\fP(int)

Schedule a SIGALRM signal to be posted to the current process in the
specified number of seconds. If the parameter is zero any alarm is
cancelled.

\fBacct\fP(pathname)

Enable accounting on the specified file.

\fBchdir\fP(pathname)

Change the process's current working directory to the specified path. Also
supported on WIN32 platforms.

\fBchmod\fP(pathname, int)

Change the mode of a file system object.

\fBchown\fP(pathname, int, int)

Change the owner and group identifiers for a file system object.

\fBchroot\fP(pathname)

Change root directory for process.

\fB_close\fP(int)

Close a file descriptor. Also supported on WIN32 platforms.

\fB_exit\fP(int)

Exit the current process returning an integer exit status to the
parent. Also supported on WIN32 platforms.

int = \fBfork\fP()

Create a new process. In the parent this returns the process identifier
for the newly created process. In the newly created process it returns
zero.

int = \fBgetpid\fP()

Get the process identifier for the current process.

int = \fBgetpgrp\fP()

Get the current process group identifier.

int = \fBgetppid\fP()

Get the parent process identifier.

int = \fBgetuid\fP()

Get the real user identifier of the owner of the current process.

int = \fBgeteuid\fP()

Get the effective user identifier for the owner of the current process.

int = \fBgetgid\fP()

Get the real group identifier for the current process.

int = \fBgetegid\fP()

Get the effective group identifier for the current process.

\fBkill\fP(int, int)

Post a signal to a process.

\fBlink\fP(pathname, pathname)

Create a link to an existing file.

\fBmkdir\fP(pathname, int)

Create a directory with the specified mode. Also supported on WIN32 platforms.

\fBmknod\fP(pathname, int, int)

Create a special file.

\fBnice\fP(int)

Change the nice value of a process.

\fBpause\fP()

Wait until a signal is delivered to the process.

\fBrmdir\fP(pathname)

Remove a directory. Also supported on WIN32 platforms.

\fBsetpgrp\fP()

Set the process group.

\fBsetuid\fP(int)

Set the real and effective user identifier for the current process.

\fBsetgid\fP(int)

Set the real and effective group identifier for the current process.

\fBsignal\fP(int, int)

Control signal handling in the process. Note at present handlers cannot
be installed so signals are of limited use in ici programs.

\fBsync\fP()

Schedule in-memory file data to be written to disk.

\fBulimit\fP(int, int)

Get and set user limits.

\fBumask\fP(int)

Set file creation mask.

\fBunlink\fP(pathname)

Remove a file. Also supported on WIN32 platforms.

\fBsystem\fP(string)

Execute a system command and return its exit status. Also supported on
WIN32 platforms however using the system's command interpreter.

\fBsleep\fP(int)

Suspend the process for the specified number of seconds.

int = \fBspawn\fP([mode,] string, string...)

int = \fBspawn\fP([mode, ] string, array)

int = \fBspawnp\fP([mode,] string, string...)

int = \fBspawnp\fP([mode, ] string, array)

Spawn a sub-process. The parameters, other than mode, are as for exec -
the string is the name of the executable and the remaining parameters
form the command line arguments passed to the executable.

The mode parameter controls whether or not the parent process waits
for the spawned process to termiante. If mode is _P_WAIT the call to
spawn returns when the process terminates and the result of spawn is
the process exit status. If mode is not passed or is _P_NOWAIT the call
to spawn returns prior to the process terminating and the result is the
Win32 process handle for the new process.

The spawnp variant will search the directories listed in the PATH
environment variable for the executable program. In all other respects
it is indentical to spawn.

This function is only available on Win32 platforms.

\fBrename\fP(pathname, pathname)

Change the name of a file. The first parameter is the name of an existing
file and the second is the new name that it is to be given.

struct = \fBpasswd\fP(int | string)

array = \fBpasswd\fP()

The passwd() function accesses the Unix password file (which may or may
not be an actual file according to the local system configuration). With
no parameters passwd() returns an array of all password file entries,
each entry is a struct. With a parameter passwd() returns the entry for
the specific user id., int parameter, or user name, string parameter. A
password file entry is a struct with the following keys and values:

.TP 1i
.B name
The user's login name, a string.
.TP 1i
.B passwd
The user's encrypted password, a string. 
Note that some systems protect this (shadow 
password files) and this field may not be an 
actual encrypted password.
.TP 1i
.B uid
The user id., an int.
.TP 1i
.B gid
The user's default group, an int.
.TP 1i
.B gecos
The so-called gecos field, a string.
.TP 1i
.B dir
The user's home directory, a string.
.TP 1i
.B shell
The user's shell (initial program), a 
string.
